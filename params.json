{"name":"Springboot-marklogic-sample","tagline":"Sample web application integrating MarkLogic 7 Java Client API with Spring Boot.","body":"# SpringBoot MarkLogic Sample [![Build Status](https://travis-ci.org/nikos/springboot-marklogic-sample.svg?branch=master)](http://travis-ci.org/nikos/springboot-marklogic-sample)\r\n\r\n## Goal\r\n\r\nBuild a simple (thin) web application with [Spring Boot](http://projects.spring.io/spring-boot/) to \r\ndemonstrate how to access domain-specific data (for the purpose of this sample: products) \r\nfrom MarkLogic via its Java API. According to [Pivotals web site](https://spring.io/blog/2013/08/06/spring-boot-simplifying-spring-for-everyone)\r\n> Spring Boot aims to make it easy to create Spring-powered, production-grade applications and services with minimum fuss.\r\n\r\nTo interact easily with the exposed REST endpoints there is a small AngularJS web client sitting on top.\r\nFor better understanding how MarkLogic's Java Client API handles JSON and XML documents\r\nboth formats are supported in the sample application.\r\n\r\n\r\n## Motivation\r\n\r\nSince [February 2013](http://www.marklogic.com/press-releases/marklogic-simplifies-development-of-enterprise-ready-applications-free-developer-license-for-marklogic-enterprise-edition-now-available/) \r\neveryone can get a [free MarkLogic Developer License](http://developer.marklogic.com/free-developer), \r\nwhich gives access to a powerful (= \"Enterprise\") NoSQL database and application platform, allowing\r\nto store and index different kind of document types and search by various ways to quickly drill-down\r\nto data you are looking for. Note: This sample does only touch the tip of the iceberg regarding\r\n[MarkLogic's (search) features](http://www.marklogic.com/what-is-marklogic/enterprise-nosql/), \r\nit is really meant only to give you an idea how easy it is building applications with it.\r\n\r\nAs a Java developer I thought it was about time to start learning about MarkLogic server\r\nand how to use the Java API to deal with JSON and XML documents in regards to creation,\r\nbinding and also query capabilites. With the recent advent of [Spring Boot](http://projects.spring.io/spring-boot/)\r\nI wanted to show case how easy and straight forward it is, and how less Java code it requires,\r\nto get a small (state-of-the-art with microservices, plus bells and whistles ready for production) \r\nweb application up and running.\r\n\r\n\r\n## Software Requirements\r\n\r\n### MarkLogic Server\r\n\r\n* [Download MarkLogic server](http://developer.marklogic.com/products/marklogic-server) (version 7), Please note: you need to create an account \r\n  with the MarkLogic developer community\r\n\r\n* [Install, start and setup](http://docs.marklogic.com/guide/installation/procedures#id_28962) your MarkLogic server instance,\r\n   \r\n* [Create a database and an associated REST API instance](http://developer.marklogic.com/learn/rest/setup),\r\n  you might consider leveraging [Roxy](https://github.com/marklogic/roxy) enabling you to easily spin up a new\r\n  database and REST endpoint from the command-line\r\n\r\n\r\n### Maven\r\n\r\nTo compile and start the application you require a Java Development Kit (JDK 7) as well\r\nas [Maven](http://maven.apache.org/download.cgi) (version 3). \r\n\r\n\r\n### Bower\r\n\r\nFor managing client-side dependencies (in this sample application: AngularJS and Bootstrap),\r\nplease install [bower](http://bower.io/) if you haven't already. This requires **Node.js** \r\nand **NPM**. To install both, the easiest is to follow the instructions on the **[Node.js homepage](http://nodejs.org)**.\r\n\r\n    npm install -g bower\r\n\r\nThen we need to run Bower (from this project's root directory) the first time to download client-side dependencies\r\nin the proper directory:\r\n\r\n    bower install\r\n\r\nTo adjust the target directory bower will save the downloaded dependencies please customize the file ```.bowerrc```.\r\n\r\n\r\n## Try it out\r\n\r\nFirst you need to adjust the configuration file which holds specifics about\r\nhow your MarkLogic server can be connected to, the easiest way is by copying\r\nthe file and modifying the connection string according to your settings:\r\n\r\n    cp src/main/resources/application-sample.yml src/main/resources/application.yml\r\n\r\nTo give the sample web application a spin, check out the sources from github \r\nand start the application directly from the command-line by executing:\r\n\r\n    mvn spring-boot:run\r\n\r\nIf you want to open the sources with your favorite IDE, you might want to \r\n\r\n    mvn eclipse:eclipse\r\n    mvn idea:idea\r\n\r\nTo start the app in debug mode (Port 5005 in this example), run:\r\n\r\n    mvn spring-boot:run -Drun.jvmArguments=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\"\r\n\r\n\r\n### Interact with the REST endpoints\r\n\r\nThe following examples use [httpie](http://httpie.org) as user-friendly cURL replacement.\r\n\r\n#### Create a new product\r\n\r\n    http POST localhost:8080/products sku=4711 name='Super Duper' description='with bars...'\r\n\r\nLook out for the Location HTTP Header allowing to retrieve this entity to a later point in \r\ntime again.\r\n\r\n#### Retrieve a single product\r\n\r\n    http GET localhost:8080/products/4711.json\r\n\r\n#### Search for products contain a certain string\r\n\r\n    http GET localhost:8080/products.json name=='Super Duper'\r\n\r\n#### Delete the product\r\n\r\n    http DELETE localhost:8080/products/4711.json\r\n\r\n\r\n## Implementation details\r\n\r\n### Spring Beans\r\n\r\nThe following diagram shows which Spring beans are used by the sample application:\r\n\r\n![Spring Beans](https://raw.githubusercontent.com/nikos/springboot-marklogic-sample/master/doc/springbeans.png)\r\n\r\n\r\n### Enable auto-refresh:\r\n\r\nBy using spring-loaded (see also https://github.com/spring-projects/spring-boot/issues/887)\r\nit is possible (to some degree) to exchange recompiled classes while \r\nyour application stays up running.\r\n\r\nSet it up under VM options in your IDE (make auto-compile after save is working):\r\n\r\n    -javaagent:/path/to/springloaded-1.2.0.RELEASE.jar -noverify\r\n\r\n\r\n## Further reading\r\n\r\n* [Introduction to the MarkLogic Java API](https://docs.marklogic.com/guide/java/intro)\r\n* [Spring Boot Reference](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\r\n* [Spring Actuator: exposing metrics and allow to monitor the application easily](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready)\r\n\r\n<!--\r\n   [Freemarker: template engine](http://freemarker.org/)\r\n-->\r\n\r\n\r\n## Feedback\r\n\r\nIn case of any questions or suggestions please get into \r\n[contact with the author](mailto:niko[at]nava[dot]de)\r\nof course reporting issues or even contribute pull requests\r\nvia github are highly welcome.","google":"UA-54116666-1","note":"Don't delete this file! It's used internally to help with page regeneration."}